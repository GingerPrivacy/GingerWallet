name: UnitTests

on:
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Install dependencies
        run: dotnet restore --locked-mode

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Test
        run: dotnet test --no-restore --configuration Release --filter "UnitTests" --logger "console;verbosity=detailed"
        continue-on-error: true # Continue even if tests fail to ensure all OSs complete their runs

      - name: Save test result for ${{ matrix.os }}
        id: test_result
        run: |
          if [ $? -ne 0 ]; then
            echo "Test failed on ${{ matrix.os }}"
            echo "::set-output name=test_result::fail"
          else
            echo "Test passed on ${{ matrix.os }}"
            echo "::set-output name=test_result::pass"
          fi

  # This job runs after all OS-specific jobs and determines the overall result
  summarize:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Fail if any test failed
        run: |
          # Check the outcome of each matrix OS
          if [[ "${{ needs.build.outputs.test_result }}" == "fail" ]]; then
            echo "Some tests failed."
            exit 1
          else
            echo "All tests passed."
